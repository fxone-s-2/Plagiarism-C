
@page "/fileupload"
@using Plagiarism_C.Service
@using Plagiarism_C.Data
@inject IFileUpload fileUpload
@inject NavigationManager NavigationManager
@inject IToastService toastService
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@using Controllers
@using Models
@using System.Linq
@using Json.Net
@using System;
@using System.IO;
@using System.Text.Json;
@using Microsoft.VisualBasic.FileIO;
@using System.Collections;
@using System.Collections.Generic;


<div align="center">
    <h2>Fileupload</h2>
    <br />
    <div>
           <p>@message</p>
    </div>

    <br />


    <div>
<textarea @bind="newItem" placeholder="Enter Text Here:" type="text" name="configJson" id="configJson" rows="10" cols="60" maxlength="30000"
          οnchange="this.value=this.value.substring(0, 3000)"
          οnkeydοwn="this.value=this.value.substring(0,3000)"
          οnkeyup="this.value=this.value.substring(0, 3000)">@Text</textarea>
    </div>


    <div class="form-group">
        <button @onclick="AddItem" type="submit" class="btn btn-success">Result</button>
        <button @onclick="ShowDocument" type="submit" class="btn btn-success">Show Test</button>
        
    </div>

    





    <p>@docIDdisplay</p>

    <p> @docText</p>
    
    <p> @docScore</p>


</div>



@code {

    public string ButtonName;
    private string newItem;
    private string changedItem;
    private Guid docID;
    private string docIDdisplay;
    private string docText;
    private string docScore;
    private DocumentItem[] documentItems;
    private DocumentItem documentItem;
    private DocumentItemsController pc;
    private DocumentItem list = new DocumentItem();
    ArrayList compare;
    private string message = "Please enter your essay below.";





    protected override async Task OnInitializedAsync() => await GetPlagItems();
    protected async Task GetPlagItems() => documentItems = await Http.GetFromJsonAsync<Models.DocumentItem[]>("https://localhost:44388/api/DocumentItems");




    private void NavigateToContactComponent()
    {
        NavigationManager.NavigateTo("contactus");
    }

    public string Address { get; set; }
    void Save()
    {
        var textAreaValue = Address;
    }
    public string Text { get; set; }

    IFileListEntry file;
    async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileUpload.UploadAsync(file);
        }
    }

    private async Task AddItem()
    {

        Guid id = Guid.NewGuid();

        compare = shakeConvert.getArray();

        changedItem = newItem;

        string[] charsToRemove = new string[]
        {"@", ",", ";", "'", "(", ")", "-", "[", "]", "{", "}", ";", ":", "<", ">", "?", "#", "$", "%", "^",  "&",  "*", "_", "~", "\""};

        foreach (var c in charsToRemove)
        {
            changedItem = changedItem.Replace(c, string.Empty);
        }

        var item = new Models.DocumentItem { Id = id, Text = changedItem };

        await Http.PostAsJsonAsync("https://localhost:44388/api/DocumentItems", item);

        item = DocumentItemsController.GetScore(item, compare);

        docID = id;

        await Http.PutAsJsonAsync("https://localhost:44388/api/DocumentItems/" + docID, item);


        if (item.Score < 10 )
        {
            message = "Definitly Not Plagiarized";

        }
        else if (item.Score < 30 && item.Score > 10)
        {
            message = "May be Plagiarized!";

        }
        else
        {
            message = "High Probability of Plagiarism!";
        }



    

    }
    public DocumentItem GetDocumentItem(Guid id)
    {

        var docList = documentItems;

        var docItem = docList.Where(item => item.Id == id).FirstOrDefault();

        return docItem;


    }

    private async Task ShowDocument()
    {

        await GetPlagItems();



        docScore = GetDocumentItem(docID).Score.ToString();
        docText = GetDocumentItem(docID).Text;

        Guid Holder = GetDocumentItem(docID).Id;

        docIDdisplay = Holder.ToString();





    }

}
