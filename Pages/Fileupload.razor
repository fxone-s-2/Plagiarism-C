
@page "/fileupload"
@using Plagiarism_C.Service
@inject IFileUpload fileUpload
@inject NavigationManager NavigationManager
@inject IToastService toastService
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@using Controllers
@using Models
@using System.Linq

<div align="center">
    <h2>Fileupload</h2>
    <br />

   
    <br />


    <div>
<textarea @bind="newItem" placeholder="Enter Text Here:" type="text" name="configJson" id="configJson" rows="10" cols="60" maxlength="300"
          οnchange="this.value=this.value.substring(0, 300)"
          οnkeydοwn="this.value=this.value.substring(0,300)"
          οnkeyup="this.value=this.value.substring(0, 300)">@Text</textarea>
    </div>


    <div class="form-group">
        <button @onclick="AddItem" type="submit" class="btn btn-success">Result</button>
        <button @onclick="ShowDocument" type="submit" class="btn btn-success">Show Test</button>
    </div>

    <InputFile OnChange="HandleFileSelected"></InputFile>

    @if (file != null)
    {
        <p> Name:@file.Name</p>
        <p> Size in Bytes: @file.Size</p>
        <p> File type:@file.Type</p>
    }





    <p>@docIDdisplay</p>

    <p> @docText</p>


</div>



@code {

    public string ButtonName;
    private string newItem;
    private Guid docID;
    private string docIDdisplay;
    private string docText;
    private DocumentItem[] documentItems;
    private DocumentItem documentItem;
    private DocumentItemsController pc;
    private DocumentItem list = new DocumentItem();


    protected override async Task OnInitializedAsync() => await GetPlagItems();
    protected async Task GetPlagItems() => documentItems = await Http.GetFromJsonAsync<Models.DocumentItem[]>("https://localhost:44388/api/DocumentItems");


    private void NavigateToContactComponent()
    {
        NavigationManager.NavigateTo("contactus");
    }

    public string Address { get; set; }
    void Save()
    {
        var textAreaValue = Address;
    }
    public string Text { get; set; }

    IFileListEntry file;
    async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileUpload.UploadAsync(file);
        }
    }

    private async Task AddItem()
    {

        Guid id = Guid.NewGuid();


        var addItem = new Models.DocumentItem { Id = id, Text = newItem };
        await Http.PostAsJsonAsync("https://localhost:44388/api/DocumentItems", addItem);

        docID = id;

        await ShowDocument();

    }
    public DocumentItem GetDocumentItem(Guid id)
    {

        var docList = documentItems;

        var docItem = docList.Where(item => item.Id == id).FirstOrDefault();

        return docItem;


    }

    private async Task ShowDocument()
    {

        await GetPlagItems();



        docText = GetDocumentItem(docID).Text;

        Guid Holder = GetDocumentItem(docID).Id;

        docIDdisplay = Holder.ToString();





    }

}
